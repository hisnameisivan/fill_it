Подготовка
int		fil_read(int fd, t_flist **begin) - чтение (1 - успех, -1 - ошибка)
t_flist	*fil_valid(char *line, int *flag, char letter) - валидация (не разбита по функциям,
	возвращает узел листа, если успех, NULL - ошибка)
void	fil_shift(char ***array) - сдвиг в левый верхний угол (не разбита по функциям)

Работа со структурой
Структура	typedef struct		s_flist
			{
				char			**array;
				int				max_x;
				int				max_y;
				struct s_flist	*next;
			}					t_flist;
void	fil_max_xy_struct(char **array, t_flist **list) - поиск максимальных размерностей
	в узле по горизонтали и вертикали (то, что спрашивал Стас)
t_flist	*fil_create_struct(char **array, char letter) - создание узла (не разбита по функциям)
void	fil_add_struct(t_flist **begin, t_flist *list) - добавление узла в список
int		fil_len_struct(t_flist *begin) - длина списка (количество фигур)

Алгоритм
int		fil_min_map(int num_ttr) - поиск минимальной карты (возвращает длину стороны квадрата)
int		fil_max_dim(t_flist *list, int side) - коррекция карты (увеличивает длину стороны,
	если фигура не влезет в начальную карту)
int		fil_algo(t_flist *list, int side, char ***map) - алгоритм вписывания фигур в карту (некорректен)

Дополнительно
int		fil_core(t_flist *begin) - каркас для объединения функций, ответственных за алгоритм
void	fil_print_struct(t_flist *begin) - печать всей структуры (для отладки)
void	fil_print_one_struct(t_flist *list) - печать узла (для отладки)

Два main'а: боевой и для тестирования. Куча тестов (в целом однотипные, но кажется,
	все покрывают, кроме > 26 фигур).
